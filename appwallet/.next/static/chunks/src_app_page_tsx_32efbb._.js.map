{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/lv/Documents/Code/nlwallet/appwallet/src/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport Image from \"next/image\";\nimport { useRouter } from \"next/navigation\";\n\nconst prompts = [\n  \"How can I check my BNB balance?\",\n  \"What's the current gas price on Avalanche?\",\n  \"How do I swap tokens on PancakeSwap?\",\n  \"What are the top NFT collections on BNB Chain?\",\n  \"How can I stake AVAX?\",\n  \"What's the TVL of Trader Joe on Avalanche?\",\n  \"How do I bridge assets from Ethereum to BNB Chain?\",\n  \"What's the APY for liquidity pools on Avalanche?\",\n  \"How can I participate in IDOs on BNB Chain?\",\n  \"What are the best DeFi protocols on Avalanche?\",\n];\n\nexport default function Home() {\n  const router = useRouter();\n  const [currentPrompt, setCurrentPrompt] = useState(\"\");\n  const [promptIndex, setPromptIndex] = useState(0);\n  const [charIndex, setCharIndex] = useState(0);\n  const [userInput, setUserInput] = useState(\"\");\n\n  useEffect(() => {\n    const typingInterval = setInterval(() => {\n      if (charIndex < prompts[promptIndex].length) {\n        setCurrentPrompt((prev) => prev + prompts[promptIndex][charIndex]);\n        setCharIndex((prev) => prev + 1);\n      } else {\n        clearInterval(typingInterval);\n        setTimeout(() => {\n          setCurrentPrompt(\"\");\n          setCharIndex(0);\n          setPromptIndex((prev) => (prev + 1) % prompts.length);\n        }, 2000); // Wait for 2 seconds before starting the next prompt\n      }\n    }, 100); // Adjust typing speed here\n\n    return () => clearInterval(typingInterval);\n  }, [promptIndex, charIndex]);\n\n  const handleInputSubmit = async (\n    e: React.KeyboardEvent<HTMLInputElement>\n  ) => {\n    if (e.key === \"Enter\" && userInput.trim()) {\n      try {\n        const response = await fetch(\"http://localhost:5001/select-chain\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ input: userInput }),\n        });\n\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n\n        const { agentId } = await response.json();\n\n        // Redirect to agents page with the selected agent ID\n        router.push(`/agents?agentId=${agentId}`);\n\n        // Clear input after sending\n        setUserInput(\"\");\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center sm:-mt-8 md:-mt-16 lg:-mt-20 sm:pl-24 md:pl-40 lg:pl-64\">\n      <div className=\"text-center space-y-6 max-w-2xl w-full px-4\">\n        <div className=\"mb-8\">\n          <Image\n            src=\"/200w.gif\"\n            alt=\"Black spiral animation\"\n            width={200}\n            height={200}\n            priority\n            className=\"mx-auto\"\n          />\n        </div>\n\n        <h1 className=\"text-4xl font-bold mb-8\">Welcome to Sunset</h1>\n        <h2 className=\"text-2xl font-semibold mb-4\">\n          What can I help you with?\n        </h2>\n        <Input\n          placeholder={currentPrompt}\n          className=\"text-lg w-full\"\n          value={userInput}\n          onChange={(e) => setUserInput(e.target.value)}\n          onKeyPress={handleInputSubmit}\n        />\n        <p className=\"text-sm text-muted-foreground\">\n          Type your question about BNB Chain or Avalanche blockchain\n        </p>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;;;AALA;;;;;AAOA,MAAM,UAAU;IACd;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEc,SAAS;;IACtB,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACnD,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC/C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;0BAAE;YACR,MAAM,iBAAiB;iDAAY;oBACjC,IAAI,YAAY,OAAO,CAAC,YAAY,CAAC,MAAM,EAAE;wBAC3C;6DAAiB,CAAC,OAAS,OAAO,OAAO,CAAC,YAAY,CAAC,UAAU;;wBACjE;6DAAa,CAAC,OAAS,OAAO;;oBAChC,OAAO;wBACL,cAAc;wBACd;6DAAW;gCACT,iBAAiB;gCACjB,aAAa;gCACb;qEAAe,CAAC,OAAS,CAAC,OAAO,CAAC,IAAI,QAAQ,MAAM;;4BACtD;4DAAG,OAAO,qDAAqD;oBACjE;gBACF;gDAAG,MAAM,2BAA2B;YAEpC;kCAAO,IAAM,cAAc;;QAC7B;yBAAG;QAAC;QAAa;KAAU;IAE3B,MAAM,oBAAoB,OACxB;QAEA,IAAI,EAAE,GAAG,KAAK,WAAW,UAAU,IAAI,IAAI;YACzC,IAAI;gBACF,MAAM,WAAW,MAAM,MAAM,sCAAsC;oBACjE,QAAQ;oBACR,SAAS;wBACP,gBAAgB;oBAClB;oBACA,MAAM,KAAK,SAAS,CAAC;wBAAE,OAAO;oBAAU;gBAC1C;gBAEA,IAAI,CAAC,SAAS,EAAE,EAAE;oBAChB,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,SAAS,IAAI;gBAEvC,qDAAqD;gBACrD,OAAO,IAAI,CAAC,CAAC,gBAAgB,EAAE,SAAS;gBAExC,4BAA4B;gBAC5B,aAAa;YACf,EAAE,OAAO,OAAO;gBACd,QAAQ,KAAK,CAAC,UAAU;YAC1B;QACF;IACF;IAEA,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;8BACb,cAAA,6LAAC,gIAAA,CAAA,UAAK;wBACJ,KAAI;wBACJ,KAAI;wBACJ,OAAO;wBACP,QAAQ;wBACR,QAAQ;wBACR,WAAU;;;;;;;;;;;8BAId,6LAAC;oBAAG,WAAU;8BAA0B;;;;;;8BACxC,6LAAC;oBAAG,WAAU;8BAA8B;;;;;;8BAG5C,6LAAC,oIAAA,CAAA,QAAK;oBACJ,aAAa;oBACb,WAAU;oBACV,OAAO;oBACP,UAAU,CAAC,IAAM,aAAa,EAAE,MAAM,CAAC,KAAK;oBAC5C,YAAY;;;;;;8BAEd,6LAAC;oBAAE,WAAU;8BAAgC;;;;;;;;;;;;;;;;;AAMrD;GAtFwB;;QACP,qIAAA,CAAA,YAAS;;;KADF"}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}